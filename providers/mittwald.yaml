#ddev-generated

auth_command:
  command: |
    set -e -o pipefail
    set -x

    if [ -z "${MITTWALD_API_TOKEN}" ] ; then
      echo "MITTWALD_API_TOKEN must be set"
      exit 1
    fi

    mw app get -ojson "${MITTWALD_APP_INSTALLATION_ID}"

    mw context set --installation-id "${MITTWALD_APP_INSTALLATION_ID}"
    mw context set --project-id "$(mw app get -ojson | jq -r '.projectId')"

    mw app ssh --test

db_pull_command:
  command: |
    set -e -o pipefail
    set -x

    database_output="/var/www/html/.ddev/.downloads/db.sql.gz"
    database_id=$(mw app get -ojson | jq -r 'if has("linkedDatabases") then ((.linkedDatabases[] | select(.purpose == "primary")).databaseId) else empty end')

    if [[ -n "${database_id:-}" ]] ; then
      mw database mysql dump "${database_id}" --gzip -o "${database_output}"
    else
      echo "app has no linked database; skipping database import"
      echo "" | gzip > "${database_output}"
    fi

files_import_command:
  command: |
    set -e -o pipefail
    set -x

    mw app download --target "${DDEV_FILES_DIR}"

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
db_push_command:
  command: |
    set -eu -o pipefail
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    DATABASE_ID=$(mw app get -ojson | jq -r '(.linkedDatabases[] | select(.purpose = "primary")).databaseId')
    gzip -dc db.sql.gz | mittwald database mysql import "${DATABASE_ID}" -i -

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
files_push_command:
  command: |
    set -eu -o pipefail
    mw app upload --source "${DDEV_FILES_DIR}"